



server {
        listen 80; 
        #  http默认端口号80,这里用了80之后，直接在浏览器输入ip就可以访问了~
        listen [::]:80; # IPv6 支持
        #  最好把/usr/local/nginx/conf/nginx.conf中的端口改成其他，不然会有冲突
        #  server_name localhost;
	server_name www.verneyzhou-code.cn;
        # return 301 https://$server_name$request_uri; # 将所有 HTTP 请求重定向到 HTTPS
        root /root/nginx/upload;
        autoindex off; # 打开索引
        add_header Cache-Control "no-cache,must-revalidate";  #  http中添加不进行缓存的配置
        location / { # 所有路由匹配
                add_header Access-Control-Allow-Origin *;  #  添加跨域支持
        }
}

#  https配置：
server {
        listen 443 default ssl;
        listen [::]:443 ssl;
        server_name www.verneyzhou-code.cn;
	# server_name localhost;
        root /root/nginx/upload;
        autoindex off; # 打开索引
        add_header Cache-Control "no-cache,must-revalidate";  #  http中添加不进行缓存的配置
        location / { # 所有路由匹配
                add_header Access-Control-Allow-Origin *;  #  添加跨域支持
        }

        # Node.js API 反向代理配置
        location /api/ {
            proxy_pass http://localhost:9527/;  # 代理转发到本地node服务端口
            proxy_http_version 1.1;  # 使用HTTP 1.1协议
            proxy_set_header Upgrade $http_upgrade;  # WebSocket支持
            proxy_set_header Connection 'upgrade';  # WebSocket连接升级
            proxy_set_header Host $host;  # 设置主机头
            proxy_cache_bypass $http_upgrade;  # 绕过缓存
            proxy_set_header X-Real-IP $remote_addr;  # 传递真实IP
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;  # 传递代理链路信息

            # 允许跨域请求
            add_header Access-Control-Allow-Origin *;  # 允许所有来源
            add_header Access-Control-Allow-Methods 'GET, POST, OPTIONS, PUT, DELETE';  # 允许的HTTP方法
            add_header Access-Control-Allow-Headers 'DNT,X-Mx-ReqToken,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Authorization';  # 允许的请求头

            # 处理 OPTIONS 请求
            if ($request_method = 'OPTIONS') {
                add_header Access-Control-Allow-Origin *;  # 预检请求跨域支持
                add_header Access-Control-Allow-Methods 'GET, POST, OPTIONS, PUT, DELETE';
                add_header Access-Control-Allow-Headers 'DNT,X-Mx-ReqToken,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Authorization';
                add_header Access-Control-Max-Age 1728000;  # 预检请求缓存时间
                add_header Content-Type 'text/plain charset=UTF-8';
                add_header Content-Length 0;
                return 204;  # 返回无内容状态码
            }
        }

        # Vue Admin Web 应用配置
        location /yiwei/vue-admin-web/ {
                # 使用alias指令将/yiwei/vue-admin-web/路径指向正确的静态资源目录
                alias /root/nginx/upload/yiwei/vue-admin-web/;
                index index.html;
                # 添加了try_files指令支持前端路由，防止刷新页面时出现404错误
                try_files $uri /yiwei/vue-admin-web/index.html;

                # 添加一些基本的安全头
                add_header X-Frame-Options "SAMEORIGIN"; # 防止点击劫持
                add_header X-XSS-Protection "1; mode=block"; # 防止XSS攻击
                add_header X-Content-Type-Options "nosniff"; # 防止MIME类型猜测
        }

        # taro-mini-app 应用配置
        location /yiwei/taro-mini-app/ {
                # 使用alias指令将/yiwei/taro-mini-app/路径指向正确的静态资源目录
                alias /root/nginx/upload/yiwei/taro-mini-app/;
                index index.html;
                # 添加了try_files指令支持前端路由，防止刷新页面时出现404错误
                try_files $uri /yiwei/taro-mini-app/index.html;

                # 添加一些基本的安全头
                add_header X-Frame-Options "SAMEORIGIN"; # 防止点击劫持
                add_header X-XSS-Protection "1; mode=block"; # 防止XSS攻击
                add_header X-Content-Type-Options "nosniff"; # 防止MIME类型猜测
        }

         #  证书密钥:nginx新建https文件夹，将密钥放这里~
        ssl_certificate /root/nginx/https/verneyzhou-code.cn.pem;  #  证书
        ssl_certificate_key /root/nginx/https/verneyzhou-code.cn.key; #  密钥

        ssl_session_timeout  5m;  # 超时时间 5min
        ssl_protocols  SSLv3 TLSv1.2;
        ssl_ciphers  ALL:!ADH:!EXPORT56:RC4+RSA:+HIGH:+MEDIUM:+LOW:+SSLv2:+EXP;  加密算法配置
        ssl_prefer_server_ciphers  on;  # 优先使用服务器端的加密算法
}
